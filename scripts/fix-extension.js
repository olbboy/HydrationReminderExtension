/**
 * fix-extension.js
 * Script s·ª≠a ch·ªØa c·∫•u tr√∫c c·ªßa extension sau khi build
 */
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');
const distDir = path.resolve(rootDir, 'dist');

async function fixExtension() {
  console.log('üîß ƒêang s·ª≠a ch·ªØa c·∫•u tr√∫c extension...');
  
  try {
    // 1. S·ª≠a t·ªáp HTML
    const htmlPath = path.join(distDir, 'popup.html');
    
    if (await fileExists(htmlPath)) {
      let htmlContent = await fs.readFile(htmlPath, 'utf-8');
      
      // Lo·∫°i b·ªè c√°c tham chi·∫øu kh√¥ng c·∫ßn thi·∫øt
      htmlContent = htmlContent.replace(/<link[^>]*modulepreload[^>]*>/g, '');
      
      // ƒê·∫£m b·∫£o ch·ªâ gi·ªØ l·∫°i m·ªôt th·∫ª CSS duy nh·∫•t
      const cssLinkMatches = htmlContent.match(/<link[^>]*stylesheet[^>]*href="\.\/assets\/popup\.css"[^>]*>/g) || [];
      if (cssLinkMatches.length > 1) {
        // Lo·∫°i b·ªè t·∫•t c·∫£ th·∫ª link CSS
        htmlContent = htmlContent.replace(/<link[^>]*stylesheet[^>]*href="\.\/assets\/popup\.css"[^>]*>/g, '');
        // Th√™m l·∫°i m·ªôt th·∫ª link CSS duy nh·∫•t
        htmlContent = htmlContent.replace(
          '</head>',
          '<link rel="stylesheet" href="./assets/popup.css">\n</head>'
        );
        console.log('‚úÖ ƒê√£ x√≥a th·∫ª CSS tr√πng l·∫∑p');
      }
      
      // Thay th·∫ø script tag sai
      htmlContent = htmlContent.replace(
        /<script[^>]*src="\.\/popup\.js"[^>]*><\/script>/g,
        ''
      );
      
      // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n JS ƒë√∫ng
      const scriptMatch = htmlContent.match(/<script[^>]*src="\.\/assets\/popup\.js"[^>]*><\/script>/);
      if (!scriptMatch) {
        // Thay th·∫ø b·∫•t k·ª≥ script n√†o tham chi·∫øu ƒë·∫øn popup.js
        htmlContent = htmlContent.replace(
          /<script[^>]*src="[^"]*popup\.js"[^>]*><\/script>/,
          '<script type="module" crossorigin src="./assets/popup.js"></script>'
        );
        
        // N·∫øu kh√¥ng c√≥ script n√†o, th√™m v√†o
        if (!htmlContent.includes('assets/popup.js')) {
          htmlContent = htmlContent.replace(
            '</head>',
            '<script type="module" crossorigin src="./assets/popup.js"></script>\n</head>'
          );
        }
      }
      
      // Ghi l·∫°i t·ªáp HTML
      await fs.writeFile(htmlPath, htmlContent);
      console.log('‚úÖ ƒê√£ s·ª≠a t·ªáp HTML');
      
      // Ki·ªÉm tra k·∫øt qu·∫£ sau khi s·ª≠a
      const updatedHtml = await fs.readFile(htmlPath, 'utf-8');
      const cssLinks = updatedHtml.match(/<link[^>]*stylesheet[^>]*href="\.\/assets\/popup\.css"[^>]*>/g) || [];
      const jsLinks = updatedHtml.match(/<script[^>]*src="\.\/assets\/popup\.js"[^>]*><\/script>/g) || [];
      
      console.log(`üìä Ki·ªÉm tra: S·ªë th·∫ª link CSS: ${cssLinks.length}, S·ªë th·∫ª script JS: ${jsLinks.length}`);
      
      if (cssLinks.length > 1) {
        console.warn('‚ö†Ô∏è V·∫´n c√≤n th·∫ª CSS tr√πng l·∫∑p!');
      }
      
      if (jsLinks.length === 0) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th·∫ª script JS!');
      }
    } else {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp HTML!');
    }
    
    // 2. Ki·ªÉm tra v√† x√≥a t·ªáp popup.js th·ª´a ·ªü th∆∞ m·ª•c g·ªëc
    const rootPopupJsPath = path.join(distDir, 'popup.js');
    if (await fileExists(rootPopupJsPath)) {
      await fs.unlink(rootPopupJsPath);
      console.log('‚úÖ ƒê√£ x√≥a t·ªáp popup.js th·ª´a ·ªü th∆∞ m·ª•c g·ªëc');
    }
    
    console.log('üéâ ƒê√£ s·ª≠a ch·ªØa c·∫•u tr√∫c extension th√†nh c√¥ng!');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi s·ª≠a ch·ªØa extension:', error);
    return false;
  }
}

async function fileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

// Ch·∫°y ch·ª©c nƒÉng
fixExtension().then(success => {
  if (success) {
    console.log('‚ú® Extension ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng!');
  } else {
    console.error('‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi s·ª≠a ch·ªØa extension!');
    process.exit(1);
  }
}); 