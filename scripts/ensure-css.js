/**
 * ensure-css.js
 * Script ƒë·∫£m b·∫£o file CSS t·ªìn t·∫°i tr∆∞·ªõc khi Vite build
 */
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

async function ensureCssExists() {
  try {
    console.log('üîç Ki·ªÉm tra file CSS tr∆∞·ªõc khi build...');
    
    // Th∆∞ m·ª•c ƒë√≠ch
    const distDir = path.join(rootDir, 'dist');
    const assetsDir = path.join(distDir, 'assets');
    
    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSS ƒë√≠ch
    const targetCssPath = path.join(assetsDir, 'popup.css');
    
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c dist/assets t·ªìn t·∫°i
    try {
      await fs.mkdir(assetsDir, { recursive: true });
      console.log('‚úÖ ƒê·∫£m b·∫£o th∆∞ m·ª•c assets t·ªìn t·∫°i');
    } catch (err) {
      if (err.code !== 'EEXIST') {
        console.error('‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c assets:', err);
      }
    }
    
    // Ki·ªÉm tra n·∫øu file CSS g·ªëc t·ªìn t·∫°i
    const srcCssPath = path.join(rootDir, 'src', 'styles.css');
    let cssContent;
    
    try {
      cssContent = await fs.readFile(srcCssPath, 'utf-8');
      console.log('‚úÖ ƒê·ªçc file CSS g·ªëc th√†nh c√¥ng');
    } catch (err) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file CSS g·ªëc, t·∫°o file m·∫∑c ƒë·ªãnh');
      
      // T·∫°o CSS m·∫∑c ƒë·ªãnh n·∫øu file g·ªëc kh√¥ng t·ªìn t·∫°i
      cssContent = `/* Default CSS generated at ${new Date().toISOString()} */
:root {
  --primary-color: #3b82f6;
  --primary-dark: #2563eb;
  --success-color: #10b981;
  --warning-color: #f59e0b;
  --error-color: #ef4444;
  --text-color: #1f2937;
  --bg-color: #ffffff;
}

body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  margin: 0;
  padding: 0;
  background-color: var(--bg-color);
  color: var(--text-color);
}
`;
    }
    
    // Th√™m timestamp ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã cache
    cssContent = `/* Pre-built CSS - Generated at: ${new Date().toISOString()} */\n${cssContent}`;
    
    // Ghi file CSS v√†o th∆∞ m·ª•c ƒë√≠ch
    await fs.writeFile(targetCssPath, cssContent);
    console.log('‚úÖ T·∫°o file CSS t·∫°i', targetCssPath);
    
    // T·∫°o file marker ƒë·ªÉ Vite bi·∫øt l√† file ƒë√£ t·ªìn t·∫°i
    const markerPath = path.join(assetsDir, '.css-exists');
    await fs.writeFile(markerPath, new Date().toISOString());
    
    console.log('üéâ Ti·ªÅn x·ª≠ l√Ω CSS ho√†n t·∫•t');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·∫£m b·∫£o CSS t·ªìn t·∫°i:', error);
    return false;
  }
}

// Ch·∫°y h√†m
ensureCssExists().then(success => {
  if (!success) {
    console.warn('‚ö†Ô∏è CSS c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i trong qu√° tr√¨nh build');
  }
}); 