// setup.js - Script ƒë·ªÉ ki·ªÉm tra v√† c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng
const fs = require('fs');
const { execSync } = require('child_process');
const path = require('path');

console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
console.log('‚îÇ  Hydration Reminder Extension Setup Tool    ‚îÇ');
console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
console.log('');

// Ki·ªÉm tra c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
const requiredDirs = ['public/sounds', 'icons', 'src'];
let missingDirs = [];

for (const dir of requiredDirs) {
  if (!fs.existsSync(dir)) {
    missingDirs.push(dir);
    console.log(`‚ùå Th∆∞ m·ª•c ${dir} kh√¥ng t·ªìn t·∫°i`);
    try {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`   ‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c ${dir}`);
    } catch (err) {
      console.log(`   ‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ${dir}: ${err.message}`);
    }
  } else {
    console.log(`‚úÖ Th∆∞ m·ª•c ${dir} ƒë√£ t·ªìn t·∫°i`);
  }
}

// Ki·ªÉm tra c√°c file √¢m thanh
const soundFiles = ['water-drop.mp3', 'bell.mp3', 'chime.mp3', 'birds.mp3', 'stream.mp3'];
let missingSounds = [];

console.log('\nKi·ªÉm tra c√°c file √¢m thanh:');
for (const sound of soundFiles) {
  const soundPath = path.join('public/sounds', sound);
  if (!fs.existsSync(soundPath)) {
    missingSounds.push(sound);
    console.log(`‚ùå File √¢m thanh ${sound} kh√¥ng t·ªìn t·∫°i`);
  } else {
    console.log(`‚úÖ File √¢m thanh ${sound} ƒë√£ t·ªìn t·∫°i`);
  }
}

// Ki·ªÉm tra c√°c file icon
const iconFiles = ['icon16.png', 'icon48.png', 'icon128.png'];
let missingIcons = [];

console.log('\nKi·ªÉm tra c√°c file icon:');
for (const icon of iconFiles) {
  const iconPath = path.join('icons', icon);
  if (!fs.existsSync(iconPath)) {
    missingIcons.push(icon);
    console.log(`‚ùå File icon ${icon} kh√¥ng t·ªìn t·∫°i`);
  } else {
    console.log(`‚úÖ File icon ${icon} ƒë√£ t·ªìn t·∫°i`);
  }
}

// Ki·ªÉm tra dependencies
console.log('\nKi·ªÉm tra c√°c dependencies:');
try {
  execSync('npm list rimraf --depth=0', { stdio: 'ignore' });
  console.log('‚úÖ rimraf ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
} catch {
  console.log('‚ùå rimraf ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t');
  console.log('   üîÑ ƒêang c√†i ƒë·∫∑t rimraf...');
  try {
    execSync('npm install --save-dev rimraf@^5.0.5', { stdio: 'inherit' });
    console.log('   ‚úÖ ƒê√£ c√†i ƒë·∫∑t rimraf th√†nh c√¥ng');
  } catch (err) {
    console.log(`   ‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t rimraf: ${err.message}`);
  }
}

// T√≥m t·∫Øt c√°c v·∫•n ƒë·ªÅ
console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
console.log('‚îÇ  T√≥m t·∫Øt ki·ªÉm tra                           ‚îÇ');
console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

if (missingSounds.length > 0) {
  console.log('\n‚ùå C√°c file √¢m thanh sau ƒë√¢y c·∫ßn ƒë∆∞·ª£c th√™m v√†o th∆∞ m·ª•c public/sounds:');
  for (const sound of missingSounds) {
    console.log(`   - ${sound}`);
  }
  console.log('\n   G·ª£i √Ω: B·∫°n c√≥ th·ªÉ t√¨m file √¢m thanh mi·ªÖn ph√≠ t·∫°i https://freesound.org');
}

if (missingIcons.length > 0) {
  console.log('\n‚ùå C√°c file icon sau ƒë√¢y c·∫ßn ƒë∆∞·ª£c th√™m v√†o th∆∞ m·ª•c icons:');
  for (const icon of missingIcons) {
    console.log(`   - ${icon}`);
  }
  console.log('\n   G·ª£i √Ω: B·∫°n c√≥ th·ªÉ t√¨m icon n∆∞·ªõc mi·ªÖn ph√≠ t·∫°i https://www.flaticon.com');
}

console.log('\nB∆∞·ªõc ti·∫øp theo:');
console.log('1. npm install   - ƒê·ªÉ c√†i ƒë·∫∑t t·∫•t c·∫£ dependencies');
console.log('2. npm run build - ƒê·ªÉ build extension');
console.log('3. B·∫≠t "Developer mode" trong chrome://extensions/');
console.log('4. Nh·∫•p "Load unpacked" v√† ch·ªçn th∆∞ m·ª•c dist');

if (missingSounds.length > 0 || missingIcons.length > 0) {
  console.log('\n‚ö†Ô∏è H√£y th√™m c√°c file c√≤n thi·∫øu tr∆∞·ªõc khi build extension');
} else {
  console.log('\n‚úÖ T·∫•t c·∫£ c√°c file c·∫ßn thi·∫øt ƒë√£ s·∫µn s√†ng, b·∫°n c√≥ th·ªÉ ti·∫øn h√†nh build extension');
} 